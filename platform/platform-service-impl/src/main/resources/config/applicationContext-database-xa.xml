<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">

  <bean id="baseXADataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean"
    init-method="init" destroy-method="close" abstract="true">
    <!-- 连接池启动时创建的初始化连接数量（默认值为0） -->
    <property name="poolSize" value="${db.initialSize}" />
    <property name="minPoolSize" value="${db.initialSize}" />
    <!-- 连接池中可同时连接的最大的连接数（默认值为8，调整为20，高峰单机器在20并发左右，自己根据应用场景定） -->
    <property name="maxPoolSize" value="${db.maxActive}" />   <!-- 最大连接数 -->
    <!-- 连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制（默认为8个，maxIdle不能设置太小，因为假如在高负载的情况下，连接的打开时间比关闭的时间快，会引起连接池中idle的个数
      上升超过maxIdle，而造成频繁的连接销毁和创建，类似于jvm参数中的Xmx设置) -->
    <property name="maxIdleTime" value="${db.maxIdle}" />   <!-- 最小空闲连接数 -->
    <!-- <property name="reapTimeout" value="20" /> -->
    <!-- <property name="maintenanceInterval" value="60" /> -->
    <property name="borrowConnectionTimeout" value="30" />
    <property name="testQuery" value="${db.validationQuery}" />
  </bean>

  <bean id="xaDataSource" parent="baseXADataSource">
    <property name="uniqueResourceName" value="xaDataSource" />
    <property name="xaDataSourceClassName"
      value="com.alibaba.druid.pool.xa.DruidXADataSource" />
    <property name="xaProperties">
      <props>
        <prop key="url">${db.url}</prop>
        <prop key="username">${db.username}</prop>
        <prop key="password">${db.password}</prop>
      </props>
    </property>
  </bean>

  <bean id="otherXADataSource" parent="baseXADataSource">
    <property name="uniqueResourceName" value="otherXADataSource" />
    <property name="xaDataSourceClassName"
      value="com.alibaba.druid.pool.xa.DruidXADataSource" />
    <property name="xaProperties">
      <props>
        <prop key="url">${db.otherurl}</prop>
        <prop key="username">${db.username}</prop>
        <prop key="password">${db.password}</prop>
      </props>
    </property>
  </bean>

  <bean id="xaSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="xaDataSource" />
    <property name="configLocation" value="classpath:config/mybatis.xml" />
    <property name="typeAliasesPackage" value="com" />  <!-- 实体类包 -->
    <property name="typeAliasesSuperType" value="com.lmiky.platform.database.pojo.BasePojo" />  <!-- 实体类父类，如果没有，则mybatis默认为Object -->
    <property name="mapperLocations" value="classpath*:config/mappers/**/*.xml" />
  </bean>

  <bean id="otherXASqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="otherXADataSource" />
    <property name="configLocation" value="classpath:config/mybatis.xml" />
    <property name="typeAliasesPackage" value="com" />  <!-- 实体类包 -->
    <property name="typeAliasesSuperType" value="com.lmiky.platform.database.pojo.BasePojo" />  <!-- 实体类父类，如果没有，则mybatis默认为Object -->
    <property name="mapperLocations" value="classpath*:config/mappers/**/*.xml" />
  </bean>

  <bean id="xaSqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
    <constructor-arg index="0" ref="xaSqlSessionFactory" />
  </bean>

  <bean id="otherXASqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
    <constructor-arg index="0" ref="otherXASqlSessionFactory" />
  </bean>

  <bean id="xaBaseDAO" class="com.lmiky.platform.database.dao.mybatis.BaseDAOImpl">
    <property name="sqlSessionTemplate" ref="xaSqlSessionTemplate" />
  </bean>

  <bean id="otherXABaseDAO" class="com.lmiky.platform.database.dao.mybatis.BaseDAOImpl">
    <property name="sqlSessionTemplate" ref="otherXASqlSessionTemplate" />
  </bean>

  <!-- atomikos事务管理器 -->
  <bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
    init-method="init" destroy-method="close">
    <property name="forceShutdown">
      <value>true</value>
    </property>
  </bean>

  <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
    <property name="transactionTimeout" value="300" />
  </bean>

  <!-- spring 事务管理器 -->
  <bean id="jtaTransactionManager"
    class="org.springframework.transaction.jta.JtaTransactionManager">
    <property name="transactionManager" ref="atomikosTransactionManager" />
    <property name="userTransaction" ref="atomikosUserTransaction" />
    <property name="allowCustomIsolationLevels" value="true" />
  </bean>
  <tx:annotation-driven transaction-manager="jtaTransactionManager" order="1"/>

</beans>